// Code generated by MockGen. DO NOT EDIT.
// Source: tokens.go
//
// Generated by this command:
//
//	mockgen -source tokens.go -destination=zz_token_fakes.go -package=tokens
//

// Package tokens is a generated GoMock package.
package tokens

import (
	reflect "reflect"

	v1 "github.com/rancher/rancher/pkg/apis/ext.cattle.io/v1"
	ext "github.com/rancher/steve/pkg/ext"
	gomock "go.uber.org/mock/gomock"
)

// MocktimeHandler is a mock of timeHandler interface.
type MocktimeHandler struct {
	ctrl     *gomock.Controller
	recorder *MocktimeHandlerMockRecorder
}

// MocktimeHandlerMockRecorder is the mock recorder for MocktimeHandler.
type MocktimeHandlerMockRecorder struct {
	mock *MocktimeHandler
}

// NewMocktimeHandler creates a new mock instance.
func NewMocktimeHandler(ctrl *gomock.Controller) *MocktimeHandler {
	mock := &MocktimeHandler{ctrl: ctrl}
	mock.recorder = &MocktimeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeHandler) EXPECT() *MocktimeHandlerMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MocktimeHandler) Now() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(string)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MocktimeHandlerMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MocktimeHandler)(nil).Now))
}

// MockhashHandler is a mock of hashHandler interface.
type MockhashHandler struct {
	ctrl     *gomock.Controller
	recorder *MockhashHandlerMockRecorder
}

// MockhashHandlerMockRecorder is the mock recorder for MockhashHandler.
type MockhashHandlerMockRecorder struct {
	mock *MockhashHandler
}

// NewMockhashHandler creates a new mock instance.
func NewMockhashHandler(ctrl *gomock.Controller) *MockhashHandler {
	mock := &MockhashHandler{ctrl: ctrl}
	mock.recorder = &MockhashHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhashHandler) EXPECT() *MockhashHandlerMockRecorder {
	return m.recorder
}

// MakeAndHashSecret mocks base method.
func (m *MockhashHandler) MakeAndHashSecret() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAndHashSecret")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeAndHashSecret indicates an expected call of MakeAndHashSecret.
func (mr *MockhashHandlerMockRecorder) MakeAndHashSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAndHashSecret", reflect.TypeOf((*MockhashHandler)(nil).MakeAndHashSecret))
}

// MockpermissionHandler is a mock of permissionHandler interface.
type MockpermissionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockpermissionHandlerMockRecorder
}

// MockpermissionHandlerMockRecorder is the mock recorder for MockpermissionHandler.
type MockpermissionHandlerMockRecorder struct {
	mock *MockpermissionHandler
}

// NewMockpermissionHandler creates a new mock instance.
func NewMockpermissionHandler(ctrl *gomock.Controller) *MockpermissionHandler {
	mock := &MockpermissionHandler{ctrl: ctrl}
	mock.recorder = &MockpermissionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpermissionHandler) EXPECT() *MockpermissionHandlerMockRecorder {
	return m.recorder
}

// UserHasManageTokenPermissions mocks base method.
func (m *MockpermissionHandler) UserHasManageTokenPermissions(ctx ext.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHasManageTokenPermissions", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHasManageTokenPermissions indicates an expected call of UserHasManageTokenPermissions.
func (mr *MockpermissionHandlerMockRecorder) UserHasManageTokenPermissions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasManageTokenPermissions", reflect.TypeOf((*MockpermissionHandler)(nil).UserHasManageTokenPermissions), ctx)
}

// UserHasPermission mocks base method.
func (m *MockpermissionHandler) UserHasPermission(verb string, token *v1.Token, ctx ext.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHasPermission", verb, token, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHasPermission indicates an expected call of UserHasPermission.
func (mr *MockpermissionHandlerMockRecorder) UserHasPermission(verb, token, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasPermission", reflect.TypeOf((*MockpermissionHandler)(nil).UserHasPermission), verb, token, ctx)
}
